# Задача №49. Решение в группах
# Планеты вращаются вокруг звезд по эллиптическим орбитам.
# Назовем самой далекой планетой ту, орбита которой имеет
# самую большую площадь. Напишите функцию
# find_farthest_orbit(list_of_orbits), которая среди списка орбит
# планет найдет ту, по которой вращается самая далекая
# планета. Круговые орбиты не учитывайте: вы знаете, что у
# вашей звезды таких планет нет, зато искусственные спутники
# были были запущены на круговые орбиты. Результатом
# функции должен быть кортеж, содержащий длины полуосей
# эллипса орбиты самой далекой планеты. Каждая орбита
# представляет из себя кортеж из пары чисел - полуосей ее
# эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b,
# где a и b - длины полуосей эллипса. При решении задачи
# используйте списочные выражения. Подсказка: проще всего
# будет найти эллипс в два шага: сначала вычислить самую
# большую площадь эллипса, а затем найти и сам эллипс,
# имеющий такую площадь. Гарантируется, что самая далекая
# планета ровно одна

# Задача №49. Решение в группах
# Ввод:
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits))
# Вывод:
# 2.5 10

# from math import pi
# old_list = [12, 6, 8, 18]
# #           что сделть     где взять          при каком условии
# new_list = [(item + 2) for item in old_list if item % 6 == 0]
# print(new_list)

# from math import pi

# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# orbits = list(filter(lambda x: x[0] != x[1], orbits))
# print(orbits)
# x = list(map(lambda x: x[0] * x[1] * pi, orbits))
# print(x)
# orbits = dict(zip(x, orbits))
# print(orbits[max(kei for kei in orbits.keys())])

# Вариант 2


def find(orbits):
    orbits = [(a, b) for (a, b) in orbits if a != b]
    space = [a*b for (a, b) in orbits]
    return (orbits[space.index(max(space))])


orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
print(find(orbits))
